import org.gradle.api.Action;
import org.gradle.api.tasks.*;
import org.gradle.workers.*;

import javax.inject.Inject;
import com.moowork.gradle.node.task.NodeTask;

plugins {
  id "com.moowork.node" version "1.2.0"
}

class RunnableNodeTask extends NodeTask implements Runnable {
    @Override
    public void run() {
        try {
            exec();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}

class NodeTaskWorker extends RunnableNodeTask {
    private final WorkerExecutor workerExecutor; 

    @Inject
    public NodeTaskWorker(WorkerExecutor workerExecutor) { 
        super();
        this.workerExecutor = workerExecutor;
    }

    @TaskAction
    public void runNode() {
        workerExecutor.submit(RunnableNodeTask.class, new Action<WorkerConfiguration>() { 
            @Override
            public void execute(WorkerConfiguration config) {
                config.setIsolationMode(IsolationMode.NONE); 
                //config.params(sourceFile, md5File); 
            }
        });
    }
}



task runRobot(type: NodeTaskWorker) {
  script = file('calculator-robot/calculator-robot.js')
}

task runAndInspectRobot(type: NodeTask) {
  script = file('calculator-robot/calculator-robot.js')
  options = ['--inspect=127.0.0.1:3001']
}

task runAndInspectRobotApp(type: NodeTaskWorker) {
  script = file('robot-app/robot_app.js')
  options = ['--inspect-brk=127.0.0.1:3002']
}

task run(type: GradleBuild) {
     tasks = ['runRobot', 'runAndInspectRobotApp']
}

// see https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
node {
  // Version of node to use.
  version = '10.11.0'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory for NPM
  npmWorkDir = file("${project.buildDir}/npm")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}